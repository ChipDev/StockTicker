
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>

#ifndef STASSID
#define STASSID "WIFI NAME"
#define STAPSK  "WIFI PASSWORD"
#endif

const char* ssid = STASSID;
const char* password = STAPSK;

const char* host = "finnhub.io";
String token = "FINNHUB.IO TOKEN";
const int httpsPort = 443;

//SHA fingerprint; used for HTTPS connection with ESP8266. Works 12/18/2020.
const char fingerprint[] PROGMEM = "2b34ad3f518da85ad553a35d481385c4a1a26043"; 

// LEDs are common anode. To turn on LED, shift register has to be grounded. To turn them off, the voltages have to have 0 potential (equal). 
// Off = 1
// On = 0
String bitsToShift[] = {"11111111", "11111111", "11111111", "11111111"}; //clear

String key = "abcdefghijklmnopqrstuvwxyz0123456789-";
String bits[] = {"00000101", "00110001", "10010011", "01100001", "00010011", "00010111", "00001001", "00100101", "11110111", "11101001", "00010101"
                 , "10110011", "01010101", "10000101", "10000001", "00000111", "00001101", "10000111", "00011001", "00110011", "10100001", "00101111", "10101011"
                 , "00111101", "00101001", "01000011", "10000001", "11101101", "01000011", "01001001", "00101101", "00011001", "00010001", "11001101", "00000001", "00001101", "01111111"
                };

String globaltext = "";
int indexs = 0;
long starttime = 0;
boolean scrolling = false;

int on = 0;

String response;
String response2;
String price = "";
String change = "";
String percentchange = "";
String price2 = "";
String change2 = "";
String percentchange2 = "";
String price3 = "";
String change3 = "";
String percentchange3 = "";


long lastupdatems;
boolean justUpdated = false;

void setup()
{

  Serial.begin(115200);

  

  pinMode(0, OUTPUT);
  pinMode(2, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(13, OUTPUT);
  pinMode(14, OUTPUT);
  pinMode(15, OUTPUT);
  pinMode(16, OUTPUT);
  digitalWrite(12, HIGH);

  for (int i = 0; i < 8; i++) {
    digitalWrite(0, HIGH);
    digitalWrite(1, HIGH);
    delay(1);
    digitalWrite(2, HIGH);
    delay(1);
    digitalWrite(0, LOW); digitalWrite(1, LOW); digitalWrite(2, LOW);
    delayMicroseconds(100);
  }

  display("LOAD");
  Serial.println("loading");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    for(int i = 0; i < 3; i++){
      ledDisplay();
    }
    delay(1);
  }

  Serial.println("Connected");
  lastupdatems = -1;
}



void updatePrices(int i) {
  if(i == 1){
    DynamicJsonDocument doc(1024);
    String input = response;
    deserializeJson(doc, input);
    JsonObject obj = doc.as<JsonObject>();
    price = obj["c"].as<String>();
    change = String((obj["pc"].as<double>() - obj["c"].as<double>()));
    percentchange = String(100*(obj["c"].as<double>() - obj["pc"].as<double>()) / obj["pc"].as<double>());
    display("TSLA");
    justUpdated = true;
    
  }else if(i == 2){
    DynamicJsonDocument doc(1024);
    String input = response2;
    deserializeJson(doc, input);
    JsonObject obj = doc.as<JsonObject>();
    price2 = obj["c"].as<String>();
    change2 = String((obj["pc"].as<double>() - obj["c"].as<double>()));
    percentchange2 = String(100*(obj["c"].as<double>() - obj["pc"].as<double>()) / obj["pc"].as<double>());
    Serial.println(percentchange2);
    display("TSLA");
    justUpdated = true;
  }
}

void loop()
{
  handleScroll();
  ledDisplay();
  long ms = millis();
  if(ms - lastupdatems > 5000 && on == 0){ 
    on++;
    justUpdated = false;
    display(percentchange);
    //Serial.println("dispaly price"+price);
  }
  else if(ms - lastupdatems > 7500 && on == 1){ 
    on++;
    display(price);
  }else if(ms - lastupdatems > 30000 && on == 2){
    on++;
    display("aapl");
  }else if(ms - lastupdatems > 35000 && on == 3){
    on++;
    display(percentchange2);
  }else if(ms - lastupdatems > 37500 && on == 4){
    on++;
    display(price2);
  }

  if (millis() - lastupdatems > 60 * 1000 || lastupdatems == -1) {
    on = 0;
    lastupdatems = millis();
    if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status
                                                                                                   

      WiFiClientSecure client;
 // Serial.print("connecting to ");
 // Serial.println(host);

 // Serial.printf("Using fingerprint '%s'\n", fingerprint);
  client.setFingerprint(fingerprint);

  if (!client.connect(host, httpsPort)) { 
                                                                                                  
    return;
  }

  String url = "/api/v1/quote?symbol=TSLA&token=" + token;
  String url2 = "/api/v1/quote?symbol=AAPL&token=" + token;
  Serial.print("requesting URL: ");
  //Serial.println(url);

  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "User-Agent: BuildFailureDetectorESP8266\r\n" +
               "Connection: keep-alive\r\n\r\n");

  while (client.connected()) {
                                                                                                      
    String line = client.readStringUntil('\n');
    if (line == "\r") {
      //Serial.println("headers received");
      break;
    }
  }
  //Serial.println("NA");
  client.setTimeout(100);
  while(client.available() > 0){
    String line = client.readStringUntil('\n');
    response=line;
    updatePrices(1);
  }

  //round2 
  
  client.print(String("GET ") + url2 + " HTTP/1.1\r\n" +
   "Host: " + host + "\r\n" +
   "User-Agent: BuildFailureDetectorESP8266\r\n" +
   "Connection: close\r\n\r\n");

  while (client.connected()) {
                                                                                                      
    String line = client.readStringUntil('\n');
    if (line == "\r") {
      Serial.println("headers received");
      break;
    }
  }
  client.setTimeout(100);
  while(client.available() > 0){
    response2 = client.readStringUntil('\n');
    updatePrices(2);
    client.stop();
  }

  
    
      display("TSLA"); 
    }
  }
}

void handleScroll(){
  if(!scrolling){return;}
  long mill = millis();
  if(indexs == globaltext.length() + 3){
    indexs = 0;
    starttime = millis(); 
  }
  if(mill > starttime + 1000/2){
    indexs++;
    starttime = mill;
    displayScroll((globaltext + "    ").substring(indexs), false);
  }
}

void display(String text) {

  scrolling = false;
  
  for (int i = 0; i < 4; i++) {
    bitsToShift[i] = "11111111";
  }
  int leds = 0;
  for (int index = 0; index <= text.length(); index++) {
    //for .
    //Serial.println(text[index]);

    if (text[index] == '.') {
      //Serial.println("Found . index: " + String(index));
      if (index == 0) {
        bitsToShift[leds] = "11111110";
        leds++;
        continue;
      } else {
        bitsToShift[leds - 1][7] = '0';
        continue;
      }
    }
    if (leds > 3) {
      break;
    }
    bitsToShift[leds] = bits[key.indexOf(tolower(text[index]))];
    leds++;
  }
}

void displayScroll(String text, boolean initial){
      if(initial){  
        scrolling = true;
        indexs = 0;
        starttime = millis() + 1000;
      
        globaltext = text;
      }
      for (int i = 0; i < 4; i++) {
          bitsToShift[i] = "11111111";
       }
      int leds = 0;
      //copied from original function
      for (int index = 0; index <= text.length(); index++) {
      
        if (text[index] == '.') {
          //Serial.println("Found . index: " + String(index));
          if (index == 0) {
            bitsToShift[leds] = "11111110";
            leds++;
            continue;
          } else {
            bitsToShift[leds - 1][7] = '0';
            continue;
          }
        }
        if (leds > 3) {
          break;
        }
        bitsToShift[leds] = bits[key.indexOf(tolower(text[index]))];
        leds++;
      }
      
}

void ledDisplay() {
  for (int i = 0; i < 5; i++) {
    if (i < 4) {
      digitalWrite(13, LOW);
      digitalWrite(14, LOW);
      digitalWrite(15, LOW);
      digitalWrite(16, LOW);
      shiftRegister(bitsToShift[i]);
      digitalWrite(i + 13, HIGH);

      //Serial.println(bitsToShift[i]);
      delayMicroseconds(100);
    } else {
      digitalWrite(16, LOW);
    }
  }
  //Serial.println(" ");
}

void shiftRegister(String bitsshift) {
  digitalWrite(4, LOW);
  for (int i = 0; i < 8; i++) {
    if (bitsshift.charAt(7 - i) == '0') {
      digitalWrite(0, LOW);
    } else {
      digitalWrite(0, HIGH);
    }
    digitalWrite(2, HIGH);

    digitalWrite(2, LOW);
  }
  digitalWrite(4, HIGH);
}
